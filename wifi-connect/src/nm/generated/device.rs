// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus;
use dbus::arg;
use dbus::nonblock;

pub trait Properties {
    fn get(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>>;
    fn get_all(
        &self,
        interface_name: &str,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    >;
    fn set(
        &self,
        interface_name: &str,
        property_name: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> nonblock::MethodReply<()>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Properties
    for nonblock::Proxy<'a, C>
{
    fn get(
        &self,
        interface_name: &str,
        property_name: &str,
    ) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Get",
            (interface_name, property_name),
        )
        .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| Ok(r.0))
    }

    fn get_all(
        &self,
        interface_name: &str,
    ) -> nonblock::MethodReply<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    > {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "GetAll",
            (interface_name,),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            )| Ok(r.0),
        )
    }

    fn set(
        &self,
        interface_name: &str,
        property_name: &str,
        value: arg::Variant<Box<dyn arg::RefArg>>,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.DBus.Properties",
            "Set",
            (interface_name, property_name, value),
        )
    }
}

#[derive(Debug)]
pub struct PropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for PropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for PropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(PropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for PropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait Introspectable {
    fn introspect(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Introspectable
    for nonblock::Proxy<'a, C>
{
    fn introspect(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait Peer {
    fn ping(&self) -> nonblock::MethodReply<()>;
    fn get_machine_id(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>> Peer
    for nonblock::Proxy<'a, C>
{
    fn ping(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait OrgFreedesktopNetworkManagerDeviceStatistics {
    fn refresh_rate_ms(&self) -> nonblock::MethodReply<u32>;
    fn set_refresh_rate_ms(&self, value: u32) -> nonblock::MethodReply<()>;
    fn tx_bytes(&self) -> nonblock::MethodReply<u64>;
    fn rx_bytes(&self) -> nonblock::MethodReply<u64>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopNetworkManagerDeviceStatistics for nonblock::Proxy<'a, C>
{
    fn refresh_rate_ms(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Statistics",
            "RefreshRateMs",
        )
    }

    fn tx_bytes(&self) -> nonblock::MethodReply<u64> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Statistics",
            "TxBytes",
        )
    }

    fn rx_bytes(&self) -> nonblock::MethodReply<u64> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Statistics",
            "RxBytes",
        )
    }

    fn set_refresh_rate_ms(&self, value: u32) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager.Device.Statistics",
            "RefreshRateMs",
            value,
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerDeviceStatisticsPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerDeviceStatisticsPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerDeviceStatisticsPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(
            OrgFreedesktopNetworkManagerDeviceStatisticsPropertiesChanged {
                properties: i.read()?,
            },
        )
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerDeviceStatisticsPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Device.Statistics";
}

pub trait OrgFreedesktopNetworkManagerDeviceWireless {
    fn get_access_points(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn get_all_access_points(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn request_scan(
        &self,
        options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> nonblock::MethodReply<()>;
    fn hw_address(&self) -> nonblock::MethodReply<String>;
    fn perm_hw_address(&self) -> nonblock::MethodReply<String>;
    fn mode(&self) -> nonblock::MethodReply<u32>;
    fn bitrate(&self) -> nonblock::MethodReply<u32>;
    fn access_points(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn active_access_point(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn wireless_capabilities(&self) -> nonblock::MethodReply<u32>;
    fn last_scan(&self) -> nonblock::MethodReply<i64>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopNetworkManagerDeviceWireless for nonblock::Proxy<'a, C>
{
    fn get_access_points(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        self.method_call(
            "org.freedesktop.NetworkManager.Device.Wireless",
            "GetAccessPoints",
            (),
        )
        .and_then(|r: (Vec<dbus::Path<'static>>,)| Ok(r.0))
    }

    fn get_all_access_points(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        self.method_call(
            "org.freedesktop.NetworkManager.Device.Wireless",
            "GetAllAccessPoints",
            (),
        )
        .and_then(|r: (Vec<dbus::Path<'static>>,)| Ok(r.0))
    }

    fn request_scan(
        &self,
        options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Device.Wireless",
            "RequestScan",
            (options,),
        )
    }

    fn hw_address(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "HwAddress",
        )
    }

    fn perm_hw_address(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "PermHwAddress",
        )
    }

    fn mode(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "Mode",
        )
    }

    fn bitrate(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "Bitrate",
        )
    }

    fn access_points(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "AccessPoints",
        )
    }

    fn active_access_point(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "ActiveAccessPoint",
        )
    }

    fn wireless_capabilities(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "WirelessCapabilities",
        )
    }

    fn last_scan(&self) -> nonblock::MethodReply<i64> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device.Wireless",
            "LastScan",
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerDeviceWirelessPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerDeviceWirelessPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerDeviceWirelessPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(
            OrgFreedesktopNetworkManagerDeviceWirelessPropertiesChanged {
                properties: i.read()?,
            },
        )
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerDeviceWirelessPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Device.Wireless";
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerDeviceWirelessAccessPointAdded {
    pub access_point: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerDeviceWirelessAccessPointAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.access_point, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerDeviceWirelessAccessPointAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerDeviceWirelessAccessPointAdded {
            access_point: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerDeviceWirelessAccessPointAdded {
    const NAME: &'static str = "AccessPointAdded";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Device.Wireless";
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerDeviceWirelessAccessPointRemoved {
    pub access_point: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerDeviceWirelessAccessPointRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.access_point, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerDeviceWirelessAccessPointRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(
            OrgFreedesktopNetworkManagerDeviceWirelessAccessPointRemoved {
                access_point: i.read()?,
            },
        )
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerDeviceWirelessAccessPointRemoved {
    const NAME: &'static str = "AccessPointRemoved";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Device.Wireless";
}

pub trait OrgFreedesktopNetworkManagerDevice {
    fn reapply(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        version_id: u64,
        flags: u32,
    ) -> nonblock::MethodReply<()>;
    fn get_applied_connection(
        &self,
        flags: u32,
    ) -> nonblock::MethodReply<(
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
        u64,
    )>;
    fn disconnect(&self) -> nonblock::MethodReply<()>;
    fn delete(&self) -> nonblock::MethodReply<()>;
    fn udi(&self) -> nonblock::MethodReply<String>;
    fn interface(&self) -> nonblock::MethodReply<String>;
    fn ip_interface(&self) -> nonblock::MethodReply<String>;
    fn driver(&self) -> nonblock::MethodReply<String>;
    fn driver_version(&self) -> nonblock::MethodReply<String>;
    fn firmware_version(&self) -> nonblock::MethodReply<String>;
    fn capabilities(&self) -> nonblock::MethodReply<u32>;
    fn ip4_address(&self) -> nonblock::MethodReply<u32>;
    fn state(&self) -> nonblock::MethodReply<u32>;
    fn state_reason(&self) -> nonblock::MethodReply<(u32, u32)>;
    fn active_connection(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn ip4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn dhcp4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn ip6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn dhcp6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>>;
    fn managed(&self) -> nonblock::MethodReply<bool>;
    fn set_managed(&self, value: bool) -> nonblock::MethodReply<()>;
    fn autoconnect(&self) -> nonblock::MethodReply<bool>;
    fn set_autoconnect(&self, value: bool) -> nonblock::MethodReply<()>;
    fn firmware_missing(&self) -> nonblock::MethodReply<bool>;
    fn nm_plugin_missing(&self) -> nonblock::MethodReply<bool>;
    fn device_type(&self) -> nonblock::MethodReply<u32>;
    fn available_connections(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>>;
    fn physical_port_id(&self) -> nonblock::MethodReply<String>;
    fn mtu(&self) -> nonblock::MethodReply<u32>;
    fn metered(&self) -> nonblock::MethodReply<u32>;
    fn lldp_neighbors(
        &self,
    ) -> nonblock::MethodReply<
        Vec<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>>,
    >;
    fn real(&self) -> nonblock::MethodReply<bool>;
    fn ip4_connectivity(&self) -> nonblock::MethodReply<u32>;
    fn ip6_connectivity(&self) -> nonblock::MethodReply<u32>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopNetworkManagerDevice for nonblock::Proxy<'a, C>
{
    fn reapply(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        version_id: u64,
        flags: u32,
    ) -> nonblock::MethodReply<()> {
        self.method_call(
            "org.freedesktop.NetworkManager.Device",
            "Reapply",
            (connection, version_id, flags),
        )
    }

    fn get_applied_connection(
        &self,
        flags: u32,
    ) -> nonblock::MethodReply<(
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
        u64,
    )> {
        self.method_call(
            "org.freedesktop.NetworkManager.Device",
            "GetAppliedConnection",
            (flags,),
        )
    }

    fn disconnect(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.NetworkManager.Device", "Disconnect", ())
    }

    fn delete(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.NetworkManager.Device", "Delete", ())
    }

    fn udi(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Udi",
        )
    }

    fn interface(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Interface",
        )
    }

    fn ip_interface(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "IpInterface",
        )
    }

    fn driver(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Driver",
        )
    }

    fn driver_version(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "DriverVersion",
        )
    }

    fn firmware_version(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "FirmwareVersion",
        )
    }

    fn capabilities(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Capabilities",
        )
    }

    fn ip4_address(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Ip4Address",
        )
    }

    fn state(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "State",
        )
    }

    fn state_reason(&self) -> nonblock::MethodReply<(u32, u32)> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "StateReason",
        )
    }

    fn active_connection(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "ActiveConnection",
        )
    }

    fn ip4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Ip4Config",
        )
    }

    fn dhcp4_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Dhcp4Config",
        )
    }

    fn ip6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Ip6Config",
        )
    }

    fn dhcp6_config(&self) -> nonblock::MethodReply<dbus::Path<'static>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Dhcp6Config",
        )
    }

    fn managed(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Managed",
        )
    }

    fn autoconnect(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Autoconnect",
        )
    }

    fn firmware_missing(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "FirmwareMissing",
        )
    }

    fn nm_plugin_missing(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "NmPluginMissing",
        )
    }

    fn device_type(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "DeviceType",
        )
    }

    fn available_connections(&self) -> nonblock::MethodReply<Vec<dbus::Path<'static>>> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "AvailableConnections",
        )
    }

    fn physical_port_id(&self) -> nonblock::MethodReply<String> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "PhysicalPortId",
        )
    }

    fn mtu(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Mtu",
        )
    }

    fn metered(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Metered",
        )
    }

    fn lldp_neighbors(
        &self,
    ) -> nonblock::MethodReply<
        Vec<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>>,
    > {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "LldpNeighbors",
        )
    }

    fn real(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Real",
        )
    }

    fn ip4_connectivity(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Ip4Connectivity",
        )
    }

    fn ip6_connectivity(&self) -> nonblock::MethodReply<u32> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Ip6Connectivity",
        )
    }

    fn set_managed(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Managed",
            value,
        )
    }

    fn set_autoconnect(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(
            &self,
            "org.freedesktop.NetworkManager.Device",
            "Autoconnect",
            value,
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerDeviceStateChanged {
    pub new_state: u32,
    pub old_state: u32,
    pub reason: u32,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerDeviceStateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.new_state, i);
        arg::RefArg::append(&self.old_state, i);
        arg::RefArg::append(&self.reason, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerDeviceStateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerDeviceStateChanged {
            new_state: i.read()?,
            old_state: i.read()?,
            reason: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerDeviceStateChanged {
    const NAME: &'static str = "StateChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Device";
}
